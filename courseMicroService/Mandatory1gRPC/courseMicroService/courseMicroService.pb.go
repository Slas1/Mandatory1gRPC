// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0
// source: courseMicroService.proto

package courseMicroService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Course struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                  string  `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Ects                int32   `protobuf:"varint,3,opt,name=ects,proto3" json:"ects,omitempty"`
	CourseResponsibleId int32   `protobuf:"varint,4,opt,name=courseResponsibleId,proto3" json:"courseResponsibleId,omitempty"`
	NRatings            int32   `protobuf:"varint,5,opt,name=nRatings,proto3" json:"nRatings,omitempty"`
	AvgRatings          float32 `protobuf:"fixed32,6,opt,name=avgRatings,proto3" json:"avgRatings,omitempty"`
	ActiveStudents      string  `protobuf:"bytes,7,opt,name=activeStudents,proto3" json:"activeStudents,omitempty"`
}

func (x *Course) Reset() {
	*x = Course{}
	if protoimpl.UnsafeEnabled {
		mi := &file_courseMicroService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Course) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Course) ProtoMessage() {}

func (x *Course) ProtoReflect() protoreflect.Message {
	mi := &file_courseMicroService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Course.ProtoReflect.Descriptor instead.
func (*Course) Descriptor() ([]byte, []int) {
	return file_courseMicroService_proto_rawDescGZIP(), []int{0}
}

func (x *Course) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Course) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Course) GetEcts() int32 {
	if x != nil {
		return x.Ects
	}
	return 0
}

func (x *Course) GetCourseResponsibleId() int32 {
	if x != nil {
		return x.CourseResponsibleId
	}
	return 0
}

func (x *Course) GetNRatings() int32 {
	if x != nil {
		return x.NRatings
	}
	return 0
}

func (x *Course) GetAvgRatings() float32 {
	if x != nil {
		return x.AvgRatings
	}
	return 0
}

func (x *Course) GetActiveStudents() string {
	if x != nil {
		return x.ActiveStudents
	}
	return ""
}

type GetCoursesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetCoursesRequest) Reset() {
	*x = GetCoursesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_courseMicroService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoursesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoursesRequest) ProtoMessage() {}

func (x *GetCoursesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_courseMicroService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoursesRequest.ProtoReflect.Descriptor instead.
func (*GetCoursesRequest) Descriptor() ([]byte, []int) {
	return file_courseMicroService_proto_rawDescGZIP(), []int{1}
}

func (x *GetCoursesRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetCoursesResponce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Course []*Course `protobuf:"bytes,1,rep,name=course,proto3" json:"course,omitempty"`
}

func (x *GetCoursesResponce) Reset() {
	*x = GetCoursesResponce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_courseMicroService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoursesResponce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoursesResponce) ProtoMessage() {}

func (x *GetCoursesResponce) ProtoReflect() protoreflect.Message {
	mi := &file_courseMicroService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoursesResponce.ProtoReflect.Descriptor instead.
func (*GetCoursesResponce) Descriptor() ([]byte, []int) {
	return file_courseMicroService_proto_rawDescGZIP(), []int{2}
}

func (x *GetCoursesResponce) GetCourse() []*Course {
	if x != nil {
		return x.Course
	}
	return nil
}

type PostCourseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Course *Course `protobuf:"bytes,1,opt,name=course,proto3" json:"course,omitempty"`
}

func (x *PostCourseRequest) Reset() {
	*x = PostCourseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_courseMicroService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostCourseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostCourseRequest) ProtoMessage() {}

func (x *PostCourseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_courseMicroService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostCourseRequest.ProtoReflect.Descriptor instead.
func (*PostCourseRequest) Descriptor() ([]byte, []int) {
	return file_courseMicroService_proto_rawDescGZIP(), []int{3}
}

func (x *PostCourseRequest) GetCourse() *Course {
	if x != nil {
		return x.Course
	}
	return nil
}

type PostCourseResponce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PostCourseResponce) Reset() {
	*x = PostCourseResponce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_courseMicroService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostCourseResponce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostCourseResponce) ProtoMessage() {}

func (x *PostCourseResponce) ProtoReflect() protoreflect.Message {
	mi := &file_courseMicroService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostCourseResponce.ProtoReflect.Descriptor instead.
func (*PostCourseResponce) Descriptor() ([]byte, []int) {
	return file_courseMicroService_proto_rawDescGZIP(), []int{4}
}

func (x *PostCourseResponce) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetCourseByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetCourseByIDRequest) Reset() {
	*x = GetCourseByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_courseMicroService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCourseByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourseByIDRequest) ProtoMessage() {}

func (x *GetCourseByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_courseMicroService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourseByIDRequest.ProtoReflect.Descriptor instead.
func (*GetCourseByIDRequest) Descriptor() ([]byte, []int) {
	return file_courseMicroService_proto_rawDescGZIP(), []int{5}
}

func (x *GetCourseByIDRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetCourseByIDResponce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Course *Course `protobuf:"bytes,1,opt,name=course,proto3" json:"course,omitempty"`
}

func (x *GetCourseByIDResponce) Reset() {
	*x = GetCourseByIDResponce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_courseMicroService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCourseByIDResponce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourseByIDResponce) ProtoMessage() {}

func (x *GetCourseByIDResponce) ProtoReflect() protoreflect.Message {
	mi := &file_courseMicroService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourseByIDResponce.ProtoReflect.Descriptor instead.
func (*GetCourseByIDResponce) Descriptor() ([]byte, []int) {
	return file_courseMicroService_proto_rawDescGZIP(), []int{6}
}

func (x *GetCourseByIDResponce) GetCourse() *Course {
	if x != nil {
		return x.Course
	}
	return nil
}

type DeleteCourseByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteCourseByIDRequest) Reset() {
	*x = DeleteCourseByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_courseMicroService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCourseByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCourseByIDRequest) ProtoMessage() {}

func (x *DeleteCourseByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_courseMicroService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCourseByIDRequest.ProtoReflect.Descriptor instead.
func (*DeleteCourseByIDRequest) Descriptor() ([]byte, []int) {
	return file_courseMicroService_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteCourseByIDRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteCourseByIDResponce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteCourseByIDResponce) Reset() {
	*x = DeleteCourseByIDResponce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_courseMicroService_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCourseByIDResponce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCourseByIDResponce) ProtoMessage() {}

func (x *DeleteCourseByIDResponce) ProtoReflect() protoreflect.Message {
	mi := &file_courseMicroService_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCourseByIDResponce.ProtoReflect.Descriptor instead.
func (*DeleteCourseByIDResponce) Descriptor() ([]byte, []int) {
	return file_courseMicroService_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteCourseByIDResponce) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PutCourseByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Course *Course `protobuf:"bytes,1,opt,name=course,proto3" json:"course,omitempty"`
}

func (x *PutCourseByIDRequest) Reset() {
	*x = PutCourseByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_courseMicroService_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutCourseByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutCourseByIDRequest) ProtoMessage() {}

func (x *PutCourseByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_courseMicroService_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutCourseByIDRequest.ProtoReflect.Descriptor instead.
func (*PutCourseByIDRequest) Descriptor() ([]byte, []int) {
	return file_courseMicroService_proto_rawDescGZIP(), []int{9}
}

func (x *PutCourseByIDRequest) GetCourse() *Course {
	if x != nil {
		return x.Course
	}
	return nil
}

type PutCourseByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PutCourseByIDResponse) Reset() {
	*x = PutCourseByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_courseMicroService_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutCourseByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutCourseByIDResponse) ProtoMessage() {}

func (x *PutCourseByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_courseMicroService_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutCourseByIDResponse.ProtoReflect.Descriptor instead.
func (*PutCourseByIDResponse) Descriptor() ([]byte, []int) {
	return file_courseMicroService_proto_rawDescGZIP(), []int{10}
}

func (x *PutCourseByIDResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_courseMicroService_proto protoreflect.FileDescriptor

var file_courseMicroService_proto_rawDesc = []byte{
	0x0a, 0x18, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xd6,
	0x01, 0x0a, 0x06, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x65, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x65, 0x63, 0x74,
	0x73, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x76, 0x67, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0a, 0x61, 0x76, 0x67, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x2d, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x48, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x06,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x22, 0x47, 0x0a, 0x11, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4d, 0x69,
	0x63, 0x72, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x22, 0x2e, 0x0a, 0x12, 0x70, 0x6f, 0x73,
	0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x26, 0x0a, 0x14, 0x67, 0x65, 0x74,
	0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x22, 0x4b, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x22, 0x29,
	0x0a, 0x17, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x34, 0x0a, 0x18, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x4a, 0x0a, 0x14, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x22, 0x31, 0x0a, 0x15, 0x70,
	0x75, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x88,
	0x04, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x5d, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x12, 0x25,
	0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4d, 0x69,
	0x63, 0x72, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x12,
	0x5d, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x25, 0x2e,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4d, 0x69, 0x63,
	0x72, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x12, 0x64,
	0x0a, 0x0d, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x42, 0x79, 0x49, 0x44, 0x12,
	0x28, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x42, 0x79, 0x49, 0x44, 0x12, 0x2b, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4d, 0x69,
	0x63, 0x72, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x0d, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x42, 0x79, 0x49, 0x44, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4d, 0x69, 0x63,
	0x72, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x23, 0x5a, 0x21, 0x4d, 0x61, 0x6e,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x31, 0x67, 0x52, 0x50, 0x43, 0x2f, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_courseMicroService_proto_rawDescOnce sync.Once
	file_courseMicroService_proto_rawDescData = file_courseMicroService_proto_rawDesc
)

func file_courseMicroService_proto_rawDescGZIP() []byte {
	file_courseMicroService_proto_rawDescOnce.Do(func() {
		file_courseMicroService_proto_rawDescData = protoimpl.X.CompressGZIP(file_courseMicroService_proto_rawDescData)
	})
	return file_courseMicroService_proto_rawDescData
}

var file_courseMicroService_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_courseMicroService_proto_goTypes = []interface{}{
	(*Course)(nil),                   // 0: courseMicroService.Course
	(*GetCoursesRequest)(nil),        // 1: courseMicroService.getCoursesRequest
	(*GetCoursesResponce)(nil),       // 2: courseMicroService.getCoursesResponce
	(*PostCourseRequest)(nil),        // 3: courseMicroService.postCourseRequest
	(*PostCourseResponce)(nil),       // 4: courseMicroService.postCourseResponce
	(*GetCourseByIDRequest)(nil),     // 5: courseMicroService.getCourseByIDRequest
	(*GetCourseByIDResponce)(nil),    // 6: courseMicroService.getCourseByIDResponce
	(*DeleteCourseByIDRequest)(nil),  // 7: courseMicroService.deleteCourseByIDRequest
	(*DeleteCourseByIDResponce)(nil), // 8: courseMicroService.deleteCourseByIDResponce
	(*PutCourseByIDRequest)(nil),     // 9: courseMicroService.putCourseByIDRequest
	(*PutCourseByIDResponse)(nil),    // 10: courseMicroService.putCourseByIDResponse
}
var file_courseMicroService_proto_depIdxs = []int32{
	0,  // 0: courseMicroService.getCoursesResponce.course:type_name -> courseMicroService.Course
	0,  // 1: courseMicroService.postCourseRequest.course:type_name -> courseMicroService.Course
	0,  // 2: courseMicroService.getCourseByIDResponce.course:type_name -> courseMicroService.Course
	0,  // 3: courseMicroService.putCourseByIDRequest.course:type_name -> courseMicroService.Course
	1,  // 4: courseMicroService.CourseService.getCourses:input_type -> courseMicroService.getCoursesRequest
	3,  // 5: courseMicroService.CourseService.postCourse:input_type -> courseMicroService.postCourseRequest
	5,  // 6: courseMicroService.CourseService.getCourseByID:input_type -> courseMicroService.getCourseByIDRequest
	7,  // 7: courseMicroService.CourseService.deleteCourseByID:input_type -> courseMicroService.deleteCourseByIDRequest
	9,  // 8: courseMicroService.CourseService.putCourseByID:input_type -> courseMicroService.putCourseByIDRequest
	2,  // 9: courseMicroService.CourseService.getCourses:output_type -> courseMicroService.getCoursesResponce
	4,  // 10: courseMicroService.CourseService.postCourse:output_type -> courseMicroService.postCourseResponce
	6,  // 11: courseMicroService.CourseService.getCourseByID:output_type -> courseMicroService.getCourseByIDResponce
	8,  // 12: courseMicroService.CourseService.deleteCourseByID:output_type -> courseMicroService.deleteCourseByIDResponce
	10, // 13: courseMicroService.CourseService.putCourseByID:output_type -> courseMicroService.putCourseByIDResponse
	9,  // [9:14] is the sub-list for method output_type
	4,  // [4:9] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_courseMicroService_proto_init() }
func file_courseMicroService_proto_init() {
	if File_courseMicroService_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_courseMicroService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Course); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_courseMicroService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoursesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_courseMicroService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoursesResponce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_courseMicroService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostCourseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_courseMicroService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostCourseResponce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_courseMicroService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCourseByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_courseMicroService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCourseByIDResponce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_courseMicroService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCourseByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_courseMicroService_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCourseByIDResponce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_courseMicroService_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutCourseByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_courseMicroService_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutCourseByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_courseMicroService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_courseMicroService_proto_goTypes,
		DependencyIndexes: file_courseMicroService_proto_depIdxs,
		MessageInfos:      file_courseMicroService_proto_msgTypes,
	}.Build()
	File_courseMicroService_proto = out.File
	file_courseMicroService_proto_rawDesc = nil
	file_courseMicroService_proto_goTypes = nil
	file_courseMicroService_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CourseServiceClient is the client API for CourseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CourseServiceClient interface {
	GetCourses(ctx context.Context, in *GetCoursesRequest, opts ...grpc.CallOption) (*GetCoursesResponce, error)
	PostCourse(ctx context.Context, in *PostCourseRequest, opts ...grpc.CallOption) (*PostCourseResponce, error)
	GetCourseByID(ctx context.Context, in *GetCourseByIDRequest, opts ...grpc.CallOption) (*GetCourseByIDResponce, error)
	DeleteCourseByID(ctx context.Context, in *DeleteCourseByIDRequest, opts ...grpc.CallOption) (*DeleteCourseByIDResponce, error)
	PutCourseByID(ctx context.Context, in *PutCourseByIDRequest, opts ...grpc.CallOption) (*PutCourseByIDResponse, error)
}

type courseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseServiceClient(cc grpc.ClientConnInterface) CourseServiceClient {
	return &courseServiceClient{cc}
}

func (c *courseServiceClient) GetCourses(ctx context.Context, in *GetCoursesRequest, opts ...grpc.CallOption) (*GetCoursesResponce, error) {
	out := new(GetCoursesResponce)
	err := c.cc.Invoke(ctx, "/courseMicroService.CourseService/getCourses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) PostCourse(ctx context.Context, in *PostCourseRequest, opts ...grpc.CallOption) (*PostCourseResponce, error) {
	out := new(PostCourseResponce)
	err := c.cc.Invoke(ctx, "/courseMicroService.CourseService/postCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) GetCourseByID(ctx context.Context, in *GetCourseByIDRequest, opts ...grpc.CallOption) (*GetCourseByIDResponce, error) {
	out := new(GetCourseByIDResponce)
	err := c.cc.Invoke(ctx, "/courseMicroService.CourseService/getCourseByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) DeleteCourseByID(ctx context.Context, in *DeleteCourseByIDRequest, opts ...grpc.CallOption) (*DeleteCourseByIDResponce, error) {
	out := new(DeleteCourseByIDResponce)
	err := c.cc.Invoke(ctx, "/courseMicroService.CourseService/deleteCourseByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) PutCourseByID(ctx context.Context, in *PutCourseByIDRequest, opts ...grpc.CallOption) (*PutCourseByIDResponse, error) {
	out := new(PutCourseByIDResponse)
	err := c.cc.Invoke(ctx, "/courseMicroService.CourseService/putCourseByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseServiceServer is the server API for CourseService service.
type CourseServiceServer interface {
	GetCourses(context.Context, *GetCoursesRequest) (*GetCoursesResponce, error)
	PostCourse(context.Context, *PostCourseRequest) (*PostCourseResponce, error)
	GetCourseByID(context.Context, *GetCourseByIDRequest) (*GetCourseByIDResponce, error)
	DeleteCourseByID(context.Context, *DeleteCourseByIDRequest) (*DeleteCourseByIDResponce, error)
	PutCourseByID(context.Context, *PutCourseByIDRequest) (*PutCourseByIDResponse, error)
}

// UnimplementedCourseServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCourseServiceServer struct {
}

func (*UnimplementedCourseServiceServer) GetCourses(context.Context, *GetCoursesRequest) (*GetCoursesResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourses not implemented")
}
func (*UnimplementedCourseServiceServer) PostCourse(context.Context, *PostCourseRequest) (*PostCourseResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCourse not implemented")
}
func (*UnimplementedCourseServiceServer) GetCourseByID(context.Context, *GetCourseByIDRequest) (*GetCourseByIDResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseByID not implemented")
}
func (*UnimplementedCourseServiceServer) DeleteCourseByID(context.Context, *DeleteCourseByIDRequest) (*DeleteCourseByIDResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCourseByID not implemented")
}
func (*UnimplementedCourseServiceServer) PutCourseByID(context.Context, *PutCourseByIDRequest) (*PutCourseByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutCourseByID not implemented")
}

func RegisterCourseServiceServer(s *grpc.Server, srv CourseServiceServer) {
	s.RegisterService(&_CourseService_serviceDesc, srv)
}

func _CourseService_GetCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoursesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).GetCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/courseMicroService.CourseService/GetCourses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).GetCourses(ctx, req.(*GetCoursesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_PostCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).PostCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/courseMicroService.CourseService/PostCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).PostCourse(ctx, req.(*PostCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_GetCourseByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).GetCourseByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/courseMicroService.CourseService/GetCourseByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).GetCourseByID(ctx, req.(*GetCourseByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_DeleteCourseByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCourseByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).DeleteCourseByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/courseMicroService.CourseService/DeleteCourseByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).DeleteCourseByID(ctx, req.(*DeleteCourseByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_PutCourseByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutCourseByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).PutCourseByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/courseMicroService.CourseService/PutCourseByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).PutCourseByID(ctx, req.(*PutCourseByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CourseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "courseMicroService.CourseService",
	HandlerType: (*CourseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getCourses",
			Handler:    _CourseService_GetCourses_Handler,
		},
		{
			MethodName: "postCourse",
			Handler:    _CourseService_PostCourse_Handler,
		},
		{
			MethodName: "getCourseByID",
			Handler:    _CourseService_GetCourseByID_Handler,
		},
		{
			MethodName: "deleteCourseByID",
			Handler:    _CourseService_DeleteCourseByID_Handler,
		},
		{
			MethodName: "putCourseByID",
			Handler:    _CourseService_PutCourseByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "courseMicroService.proto",
}
